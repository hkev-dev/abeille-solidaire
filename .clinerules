You are an expert AI code assistant specializing in Symfony PHP development, specifically for the "Abeilles Solidaires" (Solidarity Bees) web application. This application is a community-based donation platform built with Symfony 7.2, PHP 8.4, Twig for the frontend (no API), and PostgreSQL for the database. Stripe is used for credit card payments, and **CoinPayments** is the preferred solution for cryptocurrency payments. Key Symfony components to be utilized include Doctrine ORM, Forms, Security, Event Dispatcher, and Mailer.

**Project Goal:** To create a web application that facilitates a cyclical donation system where members support each other's projects financially within a structured 4x4 matrix. A **mandatory 25€ initial donation is required upon registration to activate an account and enter the Violette flower.** An optional annual membership of 25€ can be paid during registration or later.

**Core Concepts:**

- **Users:** Members of the platform with profiles, projects, and wallets. A new user must pay a 25€ initial donation upon registration to activate their account and enter the Violette flower matrix, starting at the same flower level as their parent. They may or may not pay the annual membership fee at registration.
- **Flowers (Cycles):** The donation system is structured around "flowers," representing different investment levels. There are 10 flowers:
  - Violette: 25€
  - Coquelicot: 50€
  - Bouton d'Or: 100€
  - Laurier Rose: 200€
  - Tulipe: 400€
  - Germini: 800€
  - Lys: 1600€
  - Clématite: 3200€
  - Chrysanthème: 6400€
  - Rose Gold: 12800€
- **Donations:**
  - **Registration Donation:** A mandatory 25€ donation paid by new users upon registration, going to their parent in the matrix. This donation activates the account.
  - **Solidarity Donation:** 50€ donation automatically generated when a user completes their flower cycle (4 new registrations in their branch). This donation is sent to the "Abeille Solidaire" user (the first user or "mother" account).
  - **Supplementary Donation:** Voluntary donations that users can make at any time. These donations _do not_ create a new user. They act as direct donations that help the matrix as a whole progress. These donations go to the user currently next in line to receive a "registration" donation (the user who has the fewest registrations directly below them). If multiple users are tied for the fewest registrations, you can select one randomly or use another prioritization scheme.
  - **The only donation amount originating directly from the user is 25€ (registration and supplementary). The solidarity donation is a redistribution of existing funds.**
- **Wallet:** Each user has a wallet to store 50% of the registration donations received when their cycle is completed.
- **Solidarity Donations:** When a user completes a flower cycle, 50% of the received registration donations is kept in their wallet, and the other 50% is automatically redistributed as a "solidarity donation" to the **Abeille Solidaire user (the first user or "mother" account).**
- **Matrix Structure:** The donation system is structured as a 4x4 matrix. It starts with a "mother" account (root). This mother account receives 4 accounts under it at level 1. Each of these 4 accounts then receives 4 new accounts at level 2, and so on. Placement is done chronologically (first come, first served). Each matrix level must be filled before moving to the next. **Each user starts in the same flower cycle as their parent. The "Violette" flower is just the starting point for all users.**
- **Withdrawals:** Users can withdraw funds from their wallets (minimum 50€, maximum 10000€ per week), with a 6% withdrawal fee applied. Withdrawals initiated with card payments are processed via bank wire transfer, while cryptocurrency withdrawals are processed using a cryptocurrency supported by CoinPayments. **Users must have paid their annual membership fee and their matrix branch must have at least 4 levels filled to be eligible for withdrawals.**
- **Projects:** Users can submit a short description of their projects. A project description is mandatory for withdrawal requests. Donations are not directly tied to specific projects but are necessary for the system to function.
- **Cycle Limit:** Each flower cycle has a limit of 10 iterations. This does not apply with the flow revision.
- **Supplementary Donations:** Supplementary donations act as direct donations to the next user in line to receive a new registration, helping them complete their cycle.
- **Annual Membership:** A mandatory annual membership fee of 25€ is required and renewable each year. This fee can be paid during registration or later. Non-renewal blocks access to key functionalities (including withdrawals and potentially further progression in flowers) and the site after a grace period. Consider sending email reminders before membership expiration.
- **KYC Verification:** Mandatory KYC verification is required, limiting the platform to one account per person (same name, same address). Profiles cannot be modified after verification.
- **Flower Progression:** Users progress through the flowers automatically, mirroring their parent's progression. When a parent completes their flower cycle (receives 4 new registrations in their branch), the parent automatically progresses to the next flower. The child then also progresses to the next flower, bringing their own children with them.

**Database Schema (PostgreSQL):**

- `users`: `id`, `email`, `password`, `firstname`, `lastname`, `project_description`, `wallet_balance`, `current_flower_id` (FK to `flowers`), `roles`, `is_verified`, `created_at`, `updated_at`, `registration_payment_status` ('pending', 'completed', 'failed'), `waiting_since` (timestamp - for users in the waiting room), `has_paid_annual_fee` (boolean), `matrix_position` (integer, nullable - 1-4 position in parent's matrix), `matrix_depth` (integer - level in matrix hierarchy), `parent_id` (FK to `users`)
- `flowers`: `id`, `name`, `donation_amount`
- `donations`: `id`, `donor_id` (FK to `users`), `recipient_id` (FK to `users`), `amount`, `donation_type` ('registration', 'solidarity', 'supplementary', 'membership'), `flower_id` (FK to `flowers`), `cycle_position` (1-4), `transaction_date`, `stripe_payment_intent_id`, `coinpayments_txn_id`, `crypto_withdrawal_transaction_id`
- `withdrawals`: `id`, `user_id` (FK to `users`), `amount`, `withdrawal_method` ('stripe', 'crypto'), `status` ('pending', 'processed', 'failed'), `requested_at`, `processed_at`
- `projects`: `id`, `user_id` (FK to `users`), `title`, `description`, `created_at`, `updated_at`
- `payment_methods`: `id`, `user_id` (FK to `users`), `method_type` ('card', 'crypto'), `stripe_customer_id`, `coinbase_account_id`, `is_default`

**Key Logic to Consider:**

- **User Registration:**
  1. New users access the registration form directly (no referral link).
  2. Upon submitting the registration form (handled by a Symfony Form), a new `User` entity is created with `registration_payment_status` set to 'pending' and a `waiting_since` timestamp. `has_paid_annual_fee` should be initially set to `false`. The `current_flower_id` should be set to the same flower id as the new user's parent.
  3. The user is placed in a "waiting room" and has limited access to the site.
  4. The system finds the first available slot in the 4x4 matrix using a Breadth-First Search (BFS) algorithm starting from the "mother" account (root user, potentially with ID=1 and `matrix_depth` = 0). The placement logic should fill level by level, from left to right.
  5. The user is redirected to a payment selection page (Twig template) offering options to pay the 25€ registration fee via Stripe or CoinPayments. This page should also offer the option to pay the annual membership fee along with the registration fee.
  6. **Stripe Payment (Registration Only):** If the user chooses to pay only the 25€ registration fee via Stripe, Stripe.js is used to create a payment intent for 25€. The payment intent ID is stored. Upon successful payment (confirmed via Stripe webhook), the following actions occur:
     - Find the first available parent in the matrix (a user with less than 4 children).
     - Update the `User` entity: set `registration_payment_status` to 'completed', `is_verified` to `true`, remove the `waiting_since` timestamp, set the `parent_id`, `matrix_depth`, and `matrix_position`. Set the `current_flower_id` to the same flower id as the parent.
     - Create an initial `Donation` record with `donation_type` = 'registration', `donor_id` = the new user's ID, `recipient_id` = the parent user's ID, `amount` = 25, `flower_id` = Violette's ID, and the `stripe_payment_intent_id`.
     - Dispatch a `UserRegisteredEvent` (Symfony Event Dispatcher).
  7. **Stripe Payment (Registration + Annual Membership):** If the user chooses to pay both the registration and annual membership fees via Stripe, Stripe.js is used to create a payment intent for 50€. The payment intent ID is stored. Upon successful payment (confirmed via Stripe webhook), the following actions occur:
     - Find the first available parent in the matrix.
     - Update the `User` entity: set `registration_payment_status` to 'completed', `is_verified` to `true`, remove the `waiting_since` timestamp, set `has_paid_annual_fee` to `true`, and set the `parent_id`, `matrix_depth`, and `matrix_position`. Set the `current_flower_id` to the same flower id as the parent.
     - Create an initial `Donation` record for the registration fee (as described above), with the recipient being the parent user.
     - Create a second `Donation` record with `donation_type` = 'membership', `donor_id` = the new user's ID, `recipient_id` = the platform's designated membership recipient, `amount` = 25, and the `stripe_payment_intent_id`.
     - Dispatch a `UserRegisteredEvent`.
  8. **CoinPayments Payment (Registration Only):** If the user chooses only the registration fee via CoinPayments, the application should:
     - Use the CoinPayments API to create a new transaction with `createTransaction()` for 25 EUR (or the equivalent in a supported cryptocurrency).
     - Store the `txn_id` in the `donations` table.
     - Redirect the user to the CoinPayments payment page.
     - Implement an IPN handler. Upon successful payment confirmation:
       - Find the first available parent in the matrix.
       - Update the `User` entity: set `registration_payment_status` to 'completed', `is_verified` to `true`, remove the `waiting_since` timestamp, and set the `parent_id`, `matrix_depth`, and `matrix_position`. Set the `current_flower_id` to the same flower id as the parent.
       - Create an initial `Donation` record with `donation_type` = 'registration', `donor_id` = the new user's ID, `recipient_id` = the parent user's ID, `amount` = 25, `flower_id` = Violette's ID, and the `coinpayments_txn_id`.
       - Dispatch a `UserRegisteredEvent`.
  9. **CoinPayments Payment (Registration + Annual Membership):** If the user chooses both fees via CoinPayments, the application should:
     - Use the CoinPayments API to create a new transaction with `createTransaction()` for 50 EUR (or the equivalent in a supported cryptocurrency).
     - Store the `txn_id` in the `donations` table.
     - Redirect the user to the CoinPayments payment page.
     - Implement an IPN handler. Upon successful payment confirmation:
       - Find the first available parent in the matrix.
       - Update the `User` entity: set `registration_payment_status` to 'completed', `is_verified` to `true`, remove the `waiting_since` timestamp, set `has_paid_annual_fee` to `true`, and set the `parent_id`, `matrix_depth`, and `matrix_position`. Set the `current_flower_id` to the same flower id as the parent.
       - Create an initial `Donation` record for the registration fee (as described above), with the recipient being the parent user.
       - Create a second `Donation` record with `donation_type` = 'membership', `donor_id` = the new user's ID, `recipient_id` = the platform's designated membership recipient, `amount` = 25, and the `coinpayments_txn_id`.
       - Dispatch a `UserRegisteredEvent`.
  10. Implement webhook handlers for both Stripe and CoinPayments IPN to handle payment confirmations and potential errors. Configure separate API keys for the CoinPayments sandbox and live environments.
  11. Implement a process to automatically delete accounts in the waiting room after 1 to 3 months of inactivity (payment pending). Consider a separate process or notification for users who registered but haven't paid the annual membership after a certain period.
- **Donation Process:** The donation process is driven by registrations and supplementary donations.
- **Flower Cycle Completion and Upgrade:** When a user has 4 registered users in their branch (4 children):
  - 50% of the total registration donations received (4 _ 25€ = 100€ _ 0.5 = 50€) is added to their `wallet_balance`.
  - 50% of the total registration donations received (50€) is allocated as a "solidarity donation" to the Abeille Solidaire user (the first user or "mother" account). A `Donation` record with `donation_type` = 'solidarity' is created.
  - The user's `current_flower_id` in the `users` table is automatically updated to the next flower if their parent has moved to the next flower. Implement a listener that listens for a ParentFlowerUpdateEvent.
- **Parent Flower Upgrade Event (ParentFlowerUpdateEvent):** When a user gets 4 users to register as part of their matrix, then their children have to be placed in their own matrix under the same logic. When this event is dispatched and has already passed KYC, there is a solidarity donation. When a user that is a direct child completes their flower the parent has automatically moved to the next flower. Use the logic described above to make sure 50% is distributed to the parent's wallet balance, the other 50% goes to solidarity.
- **Solidarity Donation Allocation:** The recipient of the solidarity donation is always the "Abeille Solidaire" user (the mother account). Implement a service to retrieve this user.
- **Withdrawal Process:**
  1. Users can request withdrawals via their profile (Symfony Forms and controllers).
  2. Validate the withdrawal amount (minimum 50€, maximum 10000€ per week).
  3. Check if the user has sufficient funds in their `wallet_balance`.
  4. Verify that the user has a validated KYC, a created project, `has_paid_annual_fee` is `true`, and their `matrix_depth` is at least 3 (meaning their branch has at least 4 levels filled, including themselves).
  5. Deduct the 6% withdrawal fee from the requested amount.
  6. If the withdrawal method is Stripe, use the Stripe Payouts API to send the funds to the user's linked bank account. Record the transaction details in the `withdrawals` table.
  7. If the withdrawal method is crypto:
     - Use the CoinPayments API to create a withdrawal to the user's provided cryptocurrency address using `createWithdrawal()`.
     - Record the `wd_id` (withdrawal ID from CoinPayments) in the `donations` table.
     - Monitor the withdrawal status through the CoinPayments API.
  8. Update the `wallet_balance` in the `users` table.
  9. Update the `status` of the withdrawal request in the `withdrawals` table ('pending', 'processed', 'failed').
- **Supplementary Donations:**

  1. Users can make a supplementary donation for 25€.
  2. A service determines the next user in line to receive a new "registration" donation based on the matrix structure (e.g., the user with the fewest direct children).
  3. The supplementary donation goes directly to that selected user's _parent_.
  4. Process the payment via Stripe or CoinPayments.
  5. Create a `Donation` record with `donation_type` = 'supplementary', `donor_id` = the user making the supplementary donation, `recipient_id` = the _parent_ of the next-in-line user, `amount` = 25, `flower_id` = Violette's ID, and the `stripe_payment_intent_id` or `coinpayments_txn_id`.
  6. This supplementary donation _does not_ trigger any new user registrations. It simply acts as a "boost" to help the system progress.

- **Annual Membership:** Implement logic to manage annual membership payments. Users who did not pay the annual membership during registration should have a clear way to pay it later (via a dedicated page or button). Renewals should be processed similarly, updating the `has_paid_annual_fee` flag and potentially storing the payment transaction. Implement logic to block access to key functionalities (like withdrawals and potentially further progression in flowers) for users whose membership has expired. Consider sending email reminders before membership expiration.
- **KYC Verification:** Mandatory KYC verification is required, limiting the platform to one account per person (same name, same address). Profiles cannot be modified after verification.
- **Functionalities and Transparency:**
  - Donation Receipt: Automatically generate and provide a downloadable or emailable donation receipt for each donation (registration, supplementary, and membership payments).
  - Matrix Visualization: Implement a feature allowing users to visualize their position and their direct descendants in the 4x4 matrix in the Violette flower.
  - Project Announcements: Implement a system for administrators to announce successful fundraising and project achievements.
  - Member Counter: Display a real-time count of registered donors.
  - Closed Cycles Display: Display a list of completed cycles with the associated donation amounts for transparency.
  - Services Page: Create a dedicated page where members can offer their services to other members.
- **Security:** Implement robust security measures, including input validation, protection against CSRF, XSS, and SQL injection vulnerabilities, and secure password hashing. Ensure secure handling of API keys for Stripe and CoinPayments (both sandbox and live). Implement KYC verification as required for withdrawals. Add validation to prevent users from modifying their `matrix_position`, `matrix_depth`, or `parent_id`. Implement tree depth limits to prevent infinite recursion. Add transaction locks during matrix placement to prevent race conditions.
- **Error Handling:** Implement comprehensive error handling and logging for all critical operations, especially payment processing, database interactions, and API calls to Stripe and CoinPayments. Implement try-catch blocks and appropriate error messages for user feedback.
- **Event Dispatcher Usage:** Utilize Symfony's Event Dispatcher for actions like successful registration (`UserRegisteredEvent`), flower cycle completion (`FlowerCycleCompletedEvent`), Parent Flower update (`ParentFlowerUpdateEvent`), withdrawal requested (`WithdrawalRequestedEvent`), and annual membership payment (`AnnualMembershipPaidEvent`). Listeners can then trigger actions like sending email notifications, updating statistics, or generating receipts.
- **Mailer Integration:** Implement email notifications for user registration confirmation, donation receipts (registration, supplementary, and membership payments), withdrawal status updates, membership payment confirmations, and membership renewal reminders, and other relevant events.
- **Testing Strategy:** Implement unit tests for individual components (services, repositories), functional tests for user flows (registration with and without membership, supplementary donations, withdrawal, membership payment), and integration tests for interactions with external services (Stripe, CoinPayments sandbox environment, KYC provider). Pay special attention to testing the matrix placement logic and withdrawal eligibility based on matrix depth.

- **Database Relationships (ORM):**
  - `User` has many `Donations` (as donor and recipient).
  - `User` has many `Withdrawals`.
  - `User` has one `PaymentMethod`.
  - `User` can have many `Projects`.
  - `User` has many `children` (one-to-many self-referential, inverse side).
  - `User` has one `parent` (many-to-one self-referential, owning side).
  - `Flower` has many `Donations`.

**Coding Conventions:**

- Follow Symfony best practices and coding standards.
- Use clear and descriptive variable and function names.
- Write well-documented code.
- Utilize dependency injection for services.
- Implement unit and functional tests.

**When generating code, keep the following in mind:**

- Prioritize clear, maintainable, and secure code.
- Assume all necessary entities and repositories are available.
- Focus on the backend logic, particularly within services and controllers.
- When generating Twig templates, focus on the data being passed and the basic structure, including options for paying the annual membership and displaying matrix information.
- For payment integrations, provide clear steps for interacting with the Stripe and CoinPayments APIs, explicitly mentioning the use of the sandbox environment for testing and handling both registration-only and registration+membership scenarios.

**Corrected Flower Progression System Summary (for quick reference):**

- **Initial Registration (Violette - 25€):** New user registers, pays 25€ to their parent (if any), starts in Violette. `current_flower_id` is set to the parent's current flower.
- **Completing Violette Cycle:** User gets 4 new registrations in their branch (4 children).
- **Automatic Solidarity Donation:** On completion, 50€ goes to wallet, 50€ becomes a solidarity donation **to the Abeille Solidaire user.**
- **Supplementary Donation:** Functions as a direct donation to the _parent_ of the next-in-line user (the user with the fewest children). It does not create a new user.
- **Automatic Upgrade:** When the user gets 4 new registrants the parent progresses automatically to Coquelicot, and then the first registered child progresses in the same manner, and so on.
- **Constant Donation:** All _user-initiated_ donations are 25€. Flower level indicates achievement.

This revised system provides a more sustainable and community-driven donation platform. Good luck!
